@typeparam TItem
@using System.Reflection
@using System.ComponentModel.DataAnnotations

<style>
    .auto-gridr td ,th {
        text-align: center;
    }
    
    .auto-grid tr.active{
        background-color: yellow;
    }
 </style>


@if (propertyInfo != null && propertyInfo.Length > 0)
{
    <table class="@($"table {CssClass} auto-grid")">
        <thead>
            <tr>
                @foreach (var property in propertyInfo)
                {
                    @if (!ColumnsToExcludeCSV.Contains(property.Name))
                    {
                        DisplayAttribute? displayAttribute = property.GetCustomAttribute<DisplayAttribute>();
                        if (displayAttribute != null && !string.IsNullOrWhiteSpace(displayAttribute.Description))
                        {
                            <th>
                                @displayAttribute.Description
                            </th>
                        }
                        else
                        {
                            <th>
                                @property.Name
                            </th>
                        }
                    }
                }
            </tr>
        </thead>
        <tbody style="text-align:center">
            @for(int i = (Page - 1) * Row; i <  TotalData; i++)
            {
                var item = Items[i];
                <tr @onclick="() => ChoseRowEvent(item)" class="@(item.Equals(Item) ? "active" : "")">
                    @foreach (var property in propertyInfo)
                    {
                        @if (!ColumnsToExcludeCSV.Contains(property.Name))
                        {
                            @if (property.Name.Equals(ColumnToLink))
                            {
                                <td>
                                    <a href="@Link/@property.GetValue(item)"> @property.GetValue(item) </a>
                                </td>
                            }
                            else
                            {
                                Type type = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType;
                                string typeName = type.Name;
                                <td>
                                    @if (typeName.Equals("DateTime"))
                                    {
                                        if (property.GetValue(item) != null)
                                        {
                                            @(((DateTime)property.GetValue(item)).ToString("yyyy/MM/dd"))
                                        }
                                    }
                                    else
                                    {
                                        @property.GetValue(item)
                                    }
                                </td>
                            }
                        }
                    }
                </tr>
            }
            
        </tbody>
        <tfoot>
            <tr>
                <td colspan="@propertyInfo.Count()" title="Select Month" style="text-align:center"> 
                    <button class="btn" disabled="@IsFirstPage">
                        <span class="fa fa-chevron-left" title="Previous Page" @onclick="PrePage" ></span>
                    </button>
                    @(Page + "/" + TotalPage + "頁") 
                    <button class="btn" disabled="@IsFinalPage">
                        <span class="fa fa-chevron-right" title="Next Page" @onclick="NextPage"></span>
                    </button>
                </td>
            </tr>
        </tfoot>
    </table>
}

@code {

    PropertyInfo[]? propertyInfo;

    //初始化各值
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Items != null && Items.Count > 0)
        {
            Type typeofItem = Items[0].GetType();
            propertyInfo = typeofItem.GetProperties();
            TotalData = (Items.Count < Page * Row) ? Items.Count : Page * Row;
            TotalPage = Items.Count / Row;
            if (Items.Count % Row != 0)
            {
                TotalPage++;
            }
            IsFinalPage = Page == TotalPage;
            IsFirstPage = Page == 1;
        }
    }

    //下一頁
    private void NextPage()
    {
        Page++;
        IsFirstPage = Page == 1;
        IsFinalPage = Page == TotalPage;
        TotalData = (Items.Count < Page * Row) ? Items.Count : Page * Row;
        StateHasChanged();
    }

    //前一頁
    private void PrePage()
    {
        Page--;
        IsFirstPage = Page == 1;
        IsFinalPage = Page == TotalPage;
        TotalData = (Items.Count < Page * Row) ? Items.Count : Page * Row;
        StateHasChanged();
    }

    //選取表格內欄位的事件
    protected async Task ChoseRowEvent(TItem item)
    {
        if (item.Equals(Item))
        {
            Item = default(TItem);
            var json = string.Empty;
            await SelectRowEvent.InvokeAsync(json);
        }
        else
        {
            Item = item;
            var json = Newtonsoft.Json.JsonConvert.SerializeObject(Item);
            await SelectRowEvent.InvokeAsync(json);
        }
    }

    //選取表格內欄位的事件 回傳被選擇的欄位
    [Parameter]
    public EventCallback<string> SelectRowEvent { get; set; }

    //要輸出表格的資料
    [Parameter]
    public List<TItem> Items { get; set; } = new List<TItem>();

    private TItem? Item;

    //不要顯示的欄位
    [Parameter]
    public string ColumnsToExcludeCSV { get; set; } = string.Empty;

    //TABLE 的 CSS
    [Parameter]
    public string CssClass { get; set; } = string.Empty;

    //要有超連結的欄位
    [Parameter]
    public string ColumnToLink { get; set; } = string.Empty;

    //超連結的網址
    [Parameter]
    public string Link { get; set; } = string.Empty;

    //現在的頁數
    [Parameter]
    public int Page { get; set; } = 1;

    //每頁要顯示的資料數量
    [Parameter]
    public int Row { get; set; } = 10;

    //總共有多少筆資料
    private int TotalData { get; set; }

    //總共有多少頁
    private int TotalPage{ get; set; }

    //是不是第一頁
    private bool IsFirstPage { get; set; }

    //是不是最後一頁
    private bool IsFinalPage { get; set; }
}
