@page "/ConfirmWorkOvertime"

@inject IWorkOvertimeService workOvertimeService
@inject IJSRuntime JS
@attribute [Authorize(Roles = "admin")]

<div class="card">
    <div class="card-header border-0">

        <h3 class="card-title">
            <i class="far fa-clock"></i>
            申請加班紀錄
        </h3>
    </div>
    <!-- /.card-header -->
    <div class="card-body pt-0">
        <!--The calendar -->
        @if (OverTimes.Count != 0)
        {
            <GridAutoComponent SelectRowEvent="SelectRow" 
                            Items="OverTimes"
                            ColumnsToShow="EmployeeName,AcceptDesc,OverDate,Project,Pay_133,Pay_166,Pay_200"
                            CssClass="table-hover text-nowrap"
                            Row="5"></GridAutoComponent>
        }
    </div>
    <!-- /.card-body -->
</div>

<button class="btn btn-success" @onclick="AgreeOver" disabled="@IsLoading">同意</button>
<button class="btn btn-danger" @onclick="DisagreeOver" disabled="@IsLoading">駁回</button>

<ConfirmComponent @ref="Confirmation" ConfirmationChanged="ConfirmClick"
         ConfirmationTitle=@("審核確認")
         ConfirmationMessage=@(ConfirmMessage)>
</ConfirmComponent>


@code {

    //登入人員曾經的加班紀錄
    private List<WorkOvertimeViewModel> OverTimes = new List<WorkOvertimeViewModel>();

    //選擇的加班紀錄
    private WorkOvertimeViewModel? SelectItem;

    // CONFIRM 視窗
    protected ConfirmComponent? Confirmation { get; set; }

    // CONFIRM 視窗訊息
    private string ConfirmMessage { get; set; } = string.Empty;

    //是否在讀取資料
    private bool IsLoading { get; set; } = false;

    //審核結果 (1=同意, -1=駁回)
    private int Check_Result { get; set; } = 0;

    //同意請假
    protected async void AgreeOver()
    {
        if (SelectItem != null)
        {
            Check_Result = 1;
            ConfirmMessage = $"請確定是否要同意{SelectItem.EmployeeName}於{SelectItem.OverDate.ToTWDateString()}申請的加班";
            Confirmation?.Show();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "請選擇要審核的資料");
        }
    }

    //駁回請假
    protected async void DisagreeOver()
    {
        if (SelectItem != null)
        {
            Check_Result = -1;
            ConfirmMessage = $"請確定是否要駁回{SelectItem.EmployeeName}於{SelectItem.OverDate.ToTWDateString()}申請的加班";
            Confirmation?.Show();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "請選擇要審核的資料");
        }
    }

    //初始化各值
    protected override async Task OnInitializedAsync()
    {
        GetAllOvertimeRecordAsync();
    }

    private async void GetAllOvertimeRecordAsync()
    {
        OverTimes = await workOvertimeService.GetAllWorkOvertimeAsync() ?? new List<WorkOvertimeViewModel>();

        if (OverTimes.Count > 0)
        {
            OverTimes.Init();
        }
        StateHasChanged();
    }

    //設定選擇的加班紀錄
    protected void SelectRow(string json)
    {
        SelectItem = Newtonsoft.Json.JsonConvert.DeserializeObject<WorkOvertimeViewModel>(json);
    }

    //確定審核結果
    protected async Task ConfirmClick(bool confirmed)
    {
        if (confirmed)
        {
            if (Check_Result == 1)
            {
                if (SelectItem != null)
                {
                    await workOvertimeService.AgreeWorkOvertimeAsync(SelectItem);
                    GetAllOvertimeRecordAsync();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "請選擇要審核的資料");
                }
            }
            else if (Check_Result == -1)
            {
                if (SelectItem != null)
                {
                    await workOvertimeService.DisagreeWorkOvertimeAsync(SelectItem);
                    GetAllOvertimeRecordAsync();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "請選擇要審核的資料");
                }
            }
        }
    }
}

