@page "/"
@inject ILoginService loginService
@inject IEmployeeService employeeService
@attribute [Authorize]

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@if (authState != null)
{
    <p>
        Name : @authState.User.Identity?.Name
    </p>

    <ul>
        <li>all:</li>
        @foreach (var role in authState.User.Claims)
        {
            <li>@role.Type : @role.Value</li>
        }
    </ul>
}

<ConfirmComponent @ref="NoticeConfirmation" ConfirmationChanged="NoticeConfirmClick"
         ConfirmationTitle=@("您的通知")
         ConfirmationMessage=@(notice)
         CancelBtn=@("稍後通知")
         ConfirmBtn=@("全部已讀")>
    </ConfirmComponent>
@code{
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    private AuthenticationState? authState;

    private List<Employee> employees = new List<Employee>();

    private List<Notice> notices = new List<Notice>();

    private string notice { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        if (authState != null)
        {
            employees = await loginService.GetAllEmployeeAsync() ?? new List<Employee>();
            notices = await employeeService.GetEmployeeNoticeAsync(new Employee() { EmployeeID = authState.User.Claims.FirstOrDefault(c => c.Type == "EmployeeID")?.Value ?? string.Empty}) ?? new List<Notice>();
            foreach (var item in notices.Select((notice, index) => (notice, index)))
            {
                notice += $"{item.index + 1}-{item.notice.Content}<br>";
            }
            if (!string.IsNullOrEmpty(notice))
            {
                NoticeShow();
            }
        }
    }

    // CONFIRM 視窗
    protected ConfirmComponent? NoticeConfirmation { get; set; }

    //請假按鈕事件
    protected void NoticeShow()
    {
        NoticeConfirmation?.Show();
    }

    //確定請假
    protected async Task NoticeConfirmClick(bool confirmed)
    {
        if (confirmed)
        {
            string result = await employeeService.SetNoticeToIsReadAsync(notices);
        }
    }
    
}